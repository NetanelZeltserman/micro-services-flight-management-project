
# Generated by CodiumAI
from app.models import Customer


import pytest

"""
Code Analysis

Main functionalities:
The CustomerRUD class is a view that handles the CRUD (Create, Retrieve, Update, Delete) operations for the Customer model. It inherits from mixins and generics to provide the necessary functionality for each operation. Additionally, it uses the CustomerSerializer to serialize and deserialize the data.

Methods:
- get: Retrieves a single customer instance by ID.
- put: Updates a single customer instance by ID.
- delete: Deletes a single customer instance by ID.

Fields:
- queryset: The queryset used to retrieve the customer instances.
- serializer_class: The serializer used to serialize and deserialize the data.
"""

class TestCustomerRUD:
    # Tests that a GET request for an existing customer returns the correct data. 
    def test_get_customer_returns_data(self, customer_factory):
        # Create a customer
        customer = customer_factory.create()

        # Make a GET request for the customer
        response = self.client.get(f'/customers/{customer.id}/')

        # Assert that the response status code is 200
        assert response.status_code == 200

        # Assert that the response data matches the customer data
        assert response.data == {
            'id': customer.id,
            'name': customer.name,
            'surname': customer.surname,
            'user': customer.user.id,
            'email': customer.email,
            'address': customer.address,
            'phone': customer.phone,
            'credit_card': customer.credit_card
        }

    # Tests that a PUT request for an existing customer updates the data correctly. 
    def test_put_customer_updates_data(self, customer_factory):
        # Create a customer
        customer = customer_factory.create()

        # Make a PUT request to update the customer's data
        new_data = {
            'name': 'New Name',
            'surname': 'New Surname',
            'email': 'newemail@example.com',
            'address': 'New Address',
            'phone': '1234567890',
            'credit_card': '1234567890123456'
        }
        response = self.client.put(f'/customers/{customer.id}/', data=new_data)

        # Assert that the response status code is 200
        assert response.status_code == 200

        # Refresh the customer object from the database
        customer.refresh_from_db()

        # Assert that the customer's data has been updated
        assert customer.name == new_data['name']
        assert customer.surname == new_data['surname']
        assert customer.email == new_data['email']
        assert customer.address == new_data['address']
        assert customer.phone == new_data['phone']
        assert customer.credit_card == new_data['credit_card']

    # Tests that a GET request for a non-existent customer returns a 404 status code. 
    def test_get_nonexistent_customer_returns_404(self):
        # Make a GET request for a non-existent customer
        response = self.client.get('/customers/999/')

        # Assert that the response status code is 404
        assert response.status_code == 404

    # Tests that a PUT request with invalid data returns a 400 status code. 
    def test_put_invalid_data_returns_400(self, customer_factory):
        # Create a customer
        customer = customer_factory.create()

        # Make a PUT request with invalid data
        invalid_data = {
            'email': 'invalidemail',
            'phone': '123'
        }
        response = self.client.put(f'/customers/{customer.id}/', data=invalid_data)

        # Assert that the response status code is 400
        assert response.status_code == 400

    # Tests that a DELETE request for a non-existent customer returns a 404 status code. 
    def test_delete_nonexistent_customer_returns_404(self):
        # Make a DELETE request for a non-existent customer
        response = self.client.delete('/customers/999/')

        # Assert that the response status code is 404
        assert response.status_code == 404

    # Tests that a DELETE request for an existing customer deletes the data correctly. 
    def test_delete_customer_deletes_data(self, customer_factory):
        # Create a customer
        customer = customer_factory.create()

        # Make a DELETE request to delete the customer
        response = self.client.delete(f'/customers/{customer.id}/')

        # Assert that the response status code is 204
        assert response.status_code == 204

        # Assert that the customer has been deleted from the database
        assert not Customer.objects.filter(id=customer.id).exists()